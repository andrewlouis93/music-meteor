function onClientLoad() {
    gapi.client.load('youtube', 'v3', onYouTubeApiLoad);
}

// Called automatically when YouTube API interface is loaded
function onYouTubeApiLoad() {
    gapi.client.setApiKey('AIzaSyD1VcsNnysOY6_Za-8kE-BK6Zh8jQwvo4w');
    //allow user access only when gapi loads;
    $("#loading_modal").modal('hide');
}

// 2. This code loads the IFrame Player API code asynchronously.
var tag = document.createElement('script');
tag.src = "https://www.youtube.com/iframe_api";
var firstScriptTag = document.getElementsByTagName('script')[0];
firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

// 3. This function creates an <iframe> (and YouTube player)
//    after the API code downloads.
var player;
function onYouTubeIframeAPIReady() {
	player = new YT.Player('player', {
          	height: '390',
          	width: '640',
          	playerVars: {
            		rel:0,
          	},
          	events: {
            		'onReady': onPlayerReady,
            		'onStateChange': onPlayerStateChange
          	}
        });
}

function onPlayerReady(){	
	console.log("Player ready, sending signal to mark shared links");
  	Template.the_playlist.signal();
}

function onPlayerStateChange(e){
	//Save last signal so there is no upwards cascade in check_loop
	 if(e.data == YT.PlayerState.ENDED){
		console.log("ENDED SIGNAL");
		Template.unremovable_track.check_loop(player.getPlaylistIndex(),e.data);
	}
	else if (e.data == YT.PlayerState.PLAYING){
		console.log("PLAYING SIGNAL " + player.getPlaylistIndex());
		Session.set("last_signal",e.data);
	}
	else if (e.data == YT.PlayerState.PAUSED){
		console.log(player.getPlaylistIndex());
		console.log("PAUSED SIGNAL");
		Session.set("last_signal",e.data);
	}
	else if (e.data == YT.PlayerState.BUFFERING){
		console.log("BUFFERING SIGNAL");
		Session.set("last_signal",e.data);
	}
	else if (e.data == YT.PlayerState.CUED){
		console.log("CUED SIGNAL");
		Session.set("last_signal",e.data);
	}
	else if (e.data == -1){
		console.log("unstarted: "+player.getPlaylistIndex());
		Template.unremovable_track.check_loop(player.getPlaylistIndex(),e.data);	
	}
}

function generatePlaylist(list){
	player.loadPlaylist(list);
}
